{"version":3,"sources":["components/Participant/Participant.js","App.js","serviceWorker.js","index.js"],"names":["Participant","state","id","props","name","email","e","this","setState","target","value","updateState","className","for","type","onChange","formChange","required","onFocusOut","Component","SERVICE_ID","TEMPLATE_ID","App","numParticipants","participants","invalid","participant","result","i","push","newParticipants","pop","alert","event","console","log","preventDefault","checkValidity","mailList","success","mailee","window","emailjs","send","then","response","status","text","error","sendMails","generateMailList","resultString","JSON","stringify","participantHolder","action","onSubmit","noValidate","onClick","onAddClick","onRemoveClick","AddButton","React","RemoveButton","formData","names","originalNames","shiftTimes","min","max","length","Math","ceil","floor","random","array","times","output","appender","slice","concat","shiftArray","pickFromHat","contact","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e71c718a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Participant extends Component {\n\n    state = {\n        id: this.props.id,\n        name: \"\",\n        email: \"\",\n    };\n\n    formChange(e) {\n        this.setState({ [e.target.name]: e.target.value },\n          () => {this.props.updateState(this.state);} );        \n    }\n\n    render() {\n        return (\n            <div className=\"form-group\">\n                    <h4 className=\"col\">Participant {this.props.id + 1}</h4>\n                    <div className=\"row-md\">\n                      <div className=\"col-sm\">\n                        <label className=\"col-sm control-label\" for=\"email\">Name</label>\n                        <input \n                        className=\"form-control\" \n                        type = \"text\"\n                        name= \"name\"\n                        onChange={(e) => {this.formChange(e)}}\n                        required\n                        />\n                      </div>\n                      <br/>\n                      <div className=\"col-sm\">\n                        <label className=\"col-sm control-label\" for=\"email\">Email</label>\n                        <input \n                        className=\"form-control\" \n                        type = \"email\"\n                        name=\"email\"\n                        onChange={(e) => {this.formChange(e)}}\n                        onFocusOut={(e) => {this.formChange(e)}}\n                        required\n                        />\n                      </div>\n                      <br/>\n                    </div>\n                  </div>\n        );\n    }\n}\n\nexport default Participant;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Participant from '../src/components/Participant/Participant';\n\nconst SERVICE_ID = \"gmail\";\nconst TEMPLATE_ID = \"template_4gSlCuE9_clone\"\n\nclass App extends Component {\n\nstate = {\n    numParticipants: 4,\n    participants: [\n      {id: 0, name: \"\", email: \"\"},\n      {id: 1, name: \"\", email: \"\"},\n      {id: 2, name: \"\", email: \"\"},\n      {id: 3, name: \"\", email: \"\"}\n    ],\n    invalid: true\n}\n\nupdateState = (participant) => {\n  let result = this.state.participants;\n  for(let i = 0; i < this.state.numParticipants; i++) {\n    if(participant.id === result[i].id){\n      result[i] = participant;\n    }\n  }\n  this.setState({participants: result});\n}\n\nonAddClick (e) {\n  let result = this.state.participants;\n  result.push({id: this.state.numParticipants, name: \"\", email: \"\"});\n  this.setState({numParticipants: this.state.numParticipants + 1,\n  participants: result});\n}\n\nonRemoveClick(e) {\n  if(this.state.numParticipants > 3) {\n    let newParticipants = this.state.participants;\n    newParticipants.pop();\n    this.setState(\n      {\n        numParticipants: this.state.numParticipants - 1,\n        participants: newParticipants\n      }\n      );\n  } else {\n    alert('Must have at least 3 participants.');\n  }\n}\n\nonSubmit(event) {\n\n  console.log(\"Clicked submit\");\n  event.preventDefault();\n\n  if (!event.target.checkValidity()) {\n    this.setState({ invalid: true });\n    alert(\"All fields are required and emails must be in email format.\");\n    return;\n  } else {\n    this.setState({\n    invalid: false,\n    });\n  }\n\n  let mailList = generateMailList(this.state.participants);\n  sendMails(mailList);\n\n  let resultString = JSON.stringify(this.state.participants);\n  console.log(resultString);\n  console.log(generateMailList(this.state.participants));\n}\n\nrender() {\n  let participantHolder = [];\n  for(let i = 0; i < this.state.numParticipants; i++) {\n    participantHolder.push(<Participant id={i} updateState={this.updateState}></Participant>)\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-md-2\"></div>\n          <div className=\"col-md-8\">\n            <div className=\"jumbotron\" id=\"content\">\n            <form className=\"well form-vertical\" action=\" \" id=\"santa_form\" onSubmit={(e) => this.onSubmit(e)} noValidate>\n                <fieldset>\n                  <legend><center><h2><b>Secret Santa</b></h2></center></legend><br />\n                  {participantHolder}\n                </fieldset>\n                <div className=\"text-center\">\n                  <AddButton onClick={()=> this.onAddClick()}></AddButton>\n                  <br/>\n                  <br/>\n                  <RemoveButton onClick={(e) => this.onRemoveClick(e)}></RemoveButton>\n                  <br/>\n                  <br/>\n                </div>\n                <div className=\"text-center\">\n                  <button className=\"btn btn-primary btn-sm\">Submit</button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>  \n    </div>\n  );\n}\n}\n\nclass AddButton extends React.Component {\n  render() {\n    return (\n      <button type =\"button\" className=\"btn btn-primary btn-sm\" id=\"addButton\" onClick={this.props.onClick}>\n        Add participant\n      </button>\n    );\n  };\n}\n\nclass RemoveButton extends React.Component {\n  render() {\n    return (\n      <button type =\"button\" className=\"btn btn-danger btn-sm\" id=\"removeButton\" onClick={this.props.onClick}>\n        Remove last participant\n      </button>\n    );\n  };\n}\n\nfunction sendMails(mailList) {\n  let success = true;\n  for(let mailee of mailList) {\n    window.emailjs.send(SERVICE_ID, TEMPLATE_ID, mailee)\n    .then(function(response) {\n      console.log('SUCCESS!', response.status, response.text);\n    }, function(error) {\n      success = false;\n      console.log('FAILED...', error);\n    });\n  }\n\n  if(success) {\n    alert('Emails successfully sent!');\n    this.setState({\n      numParticipants: 4,\n      participants: [\n        {id: 0, name: \"\", email: \"\"},\n        {id: 1, name: \"\", email: \"\"},\n        {id: 2, name: \"\", email: \"\"},\n        {id: 3, name: \"\", email: \"\"}\n      ]\n  })\n  } else {\n    alert('One or more emails failed to send. Verify that the addresses provided are correct.');\n  }\n}\n\nfunction generateMailList(formData) {\n  let result = [];\n\n  let names\n  names = pickFromHat(formData);\n\n  let i = 0;\n\n  for(let participant of formData) {\n    let contact = {\n      \"to\": participant.email,\n      \"to_name\": participant.name,\n      \"santa_recipient\": names[i++]\n    };\n    result.push(contact);\n  }\n\n  return result;\n}\n\n\nfunction pickFromHat(formData) {\n\n  function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n   }\n\n  function shiftArray(array, times) {\n  let output = array;\n  let appender = array.slice(array.length - times);\n  for(let i = 0; i < times; i++) {\n    output.pop();\n  }\n  output = appender.concat(output);\n\n  return output;\n}\n\n  let originalNames = [];\n  let result = [];\n  for(let participant of formData) {\n    originalNames.push(participant.name);\n  }\n  let count = originalNames.length;\n  let shiftTimes = getRandomInt(1, count);\n  result = shiftArray(originalNames, shiftTimes);\n\n  return result;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}